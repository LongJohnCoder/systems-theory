<HTML
><HEAD
><TITLE
>Read and Write a /proc File</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"><LINK
REL="HOME"
TITLE="The Linux Kernel Module Programming Guide"
HREF="book1.htm"><LINK
REL="UP"
TITLE="The /proc File System"
HREF="c708.htm"><LINK
REL="PREVIOUS"
TITLE="The /proc File System"
HREF="c708.htm"><LINK
REL="NEXT"
TITLE="Manage /proc file with standard filesystem"
HREF="x810.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>The Linux Kernel Module Programming Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c708.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 5. The /proc File System</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="x810.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN769"
></A
>Read and Write a /proc File</H1
><P
>        We have seen a very simple example for a /proc file where we only read the file <TT
CLASS="FILENAME"
>/proc/helloworld</TT
>.
	It's also possible to write in a /proc file. It works the same way as read, a function is called when the /proc
	file is written. But there is a little difference with read, data comes from user, so you have to import data from
	user space to kernel space (with <TT
CLASS="FUNCTION"
>copy_from_user</TT
> or <TT
CLASS="FUNCTION"
>get_user</TT
>)
        </P
><A
NAME="AEN775"
></A
><A
NAME="AEN778"
></A
><A
NAME="AEN781"
></A
><A
NAME="AEN784"
></A
><A
NAME="AEN787"
></A
><A
NAME="AEN789"
></A
><P
>	The reason for <TT
CLASS="FUNCTION"
>copy_from_user</TT
> or <TT
CLASS="FUNCTION"
>get_user</TT
> is that Linux memory (on Intel
	architecture, it may be different under some other processors) is segmented.  This means that a pointer, by itself,
	does not reference a unique location in memory, only a location in a memory segment, and you need to know which
	memory segment it is to be able to use it. There is one memory segment for the kernel, and one for each of the processes.
	</P
><P
>	The only memory segment accessible to a process is its own, so when writing regular programs to run as processes,
	there's no need to worry about segments. When you write a kernel module, normally you want to access the kernel memory
	segment, which is handled automatically by the system. However, when the content of a memory buffer needs to be passed between
	the currently running process and the kernel, the kernel function receives a pointer to the memory buffer which is in the
	process segment. The <TT
CLASS="FUNCTION"
>put_user</TT
> and <TT
CLASS="FUNCTION"
>get_user</TT
> macros allow you to access that
	memory. These functions handle only one caracter, you can handle several caracters with <TT
CLASS="FUNCTION"
>copy_to_user</TT
> and
	<TT
CLASS="FUNCTION"
>copy_from_user</TT
>. As the buffer (in read or write function) is in kernel space, for write function
	you need to import data because	it comes from user space, but not for the read function because data is already
	in kernel space.
	</P
><A
NAME="AEN800"
></A
><A
NAME="AEN803"
></A
><DIV
CLASS="EXAMPLE"
><A
NAME="AEN806"
></A
><P
><B
>Example 5-2. procfs2.c</B
></P
><PRE
CLASS="PROGRAMLISTING"
>/**
 *  procfs2.c -  create a "file" in /proc
 *
 */

#include &#60;linux/module.h&#62;	/* Specifically, a module */
#include &#60;linux/kernel.h&#62;	/* We're doing kernel work */
#include &#60;linux/proc_fs.h&#62;	/* Necessary because we use the proc fs */
#include &#60;asm/uaccess.h&#62;	/* for copy_from_user */

#define PROCFS_MAX_SIZE		1024
#define PROCFS_NAME 		"buffer1k"

/**
 * This structure hold information about the /proc file
 *
 */
static struct proc_dir_entry *Our_Proc_File;

/**
 * The buffer used to store character for this module
 *
 */
static char procfs_buffer[PROCFS_MAX_SIZE];

/**
 * The size of the buffer
 *
 */
static unsigned long procfs_buffer_size = 0;

/** 
 * This function is called then the /proc file is read
 *
 */
int 
procfile_read(char *buffer,
	      char **buffer_location,
	      off_t offset, int buffer_length, int *eof, void *data)
{
	int ret;
	
	printk(KERN_INFO "procfile_read (/proc/%s) called\n", PROCFS_NAME);
	
	if (offset &#62; 0) {
		/* we have finished to read, return 0 */
		ret  = 0;
	} else {
		/* fill the buffer, return the buffer size */
		memcpy(buffer, procfs_buffer, procfs_buffer_size);
		ret = procfs_buffer_size;
	}

	return ret;
}

/**
 * This function is called with the /proc file is written
 *
 */
int procfile_write(struct file *file, const char *buffer, unsigned long count,
		   void *data)
{
	/* get buffer size */
	procfs_buffer_size = count;
	if (procfs_buffer_size &#62; PROCFS_MAX_SIZE ) {
		procfs_buffer_size = PROCFS_MAX_SIZE;
	}
	
	/* write data to the buffer */
	if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
		return -EFAULT;
	}
	
	return procfs_buffer_size;
}

/**
 *This function is called when the module is loaded
 *
 */
int init_module()
{
	/* create the /proc file */
	Our_Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
	
	if (Our_Proc_File == NULL) {
		remove_proc_entry(PROCFS_NAME, &#38;proc_root);
		printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
			PROCFS_NAME);
		return -ENOMEM;
	}

	Our_Proc_File-&#62;read_proc  = procfile_read;
	Our_Proc_File-&#62;write_proc = procfile_write;
	Our_Proc_File-&#62;owner 	  = THIS_MODULE;
	Our_Proc_File-&#62;mode 	  = S_IFREG | S_IRUGO;
	Our_Proc_File-&#62;uid 	  = 0;
	Our_Proc_File-&#62;gid 	  = 0;
	Our_Proc_File-&#62;size 	  = 37;

	printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);	
	return 0;	/* everything is ok */
}

/**
 *This function is called when the module is unloaded
 *
 */
void cleanup_module()
{
	remove_proc_entry(PROCFS_NAME, &#38;proc_root);
	printk(KERN_INFO "/proc/%s removed\n", PROCFS_NAME);
}</PRE
></DIV
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c708.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="x810.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>The /proc File System</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c708.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Manage /proc file with standard filesystem</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>