<HTML
><HEAD
><TITLE
>Flashing keyboard LEDs</TITLE
><META
NAME="GENERATOR"
CONTENT="Modular DocBook HTML Stylesheet Version 1.7"><LINK
REL="HOME"
TITLE="The Linux Kernel Module Programming Guide"
HREF="book1.htm"><LINK
REL="UP"
TITLE="Replacing Printks"
HREF="c1159.htm"><LINK
REL="PREVIOUS"
TITLE="Replacing Printks"
HREF="c1159.htm"><LINK
REL="NEXT"
TITLE="Scheduling Tasks"
HREF="c1209.htm"></HEAD
><BODY
CLASS="SECT1"
BGCOLOR="#FFFFFF"
TEXT="#000000"
LINK="#0000FF"
VLINK="#840084"
ALINK="#0000FF"
><DIV
CLASS="NAVHEADER"
><TABLE
SUMMARY="Header navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TH
COLSPAN="3"
ALIGN="center"
>The Linux Kernel Module Programming Guide</TH
></TR
><TR
><TD
WIDTH="10%"
ALIGN="left"
VALIGN="bottom"
><A
HREF="c1159.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="80%"
ALIGN="center"
VALIGN="bottom"
>Chapter 10. Replacing Printks</TD
><TD
WIDTH="10%"
ALIGN="right"
VALIGN="bottom"
><A
HREF="c1209.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
></TABLE
><HR
ALIGN="LEFT"
WIDTH="100%"></DIV
><DIV
CLASS="SECT1"
><H1
CLASS="SECT1"
><A
NAME="AEN1194"
></A
>Flashing keyboard LEDs</H1
><A
NAME="AEN1196"
></A
><P
>In certain conditions, you may desire a simpler and more direct way to communicate to the external world.
	Flashing keyboard LEDs can be such a solution: It is an immediate way to attract attention or to display a status condition.
	Keyboard LEDs are present on every hardware, they are always visible, they do not need any setup, and their use is rather simple and 
	non-intrusive,  compared to writing to a tty or a file.</P
><P
>The following source code illustrates a minimal kernel module which, when loaded, starts blinking the keyboard LEDs until it is unloaded.</P
><DIV
CLASS="EXAMPLE"
><A
NAME="AEN1201"
></A
><P
><B
>Example 10-2. kbleds.c</B
></P
><PRE
CLASS="PROGRAMLISTING"
>/* 
 *  kbleds.c - Blink keyboard leds until the module is unloaded.
 */

#include &#60;linux/module.h&#62;
#include &#60;linux/config.h&#62;
#include &#60;linux/init.h&#62;
#include &#60;linux/tty.h&#62;		/* For fg_console, MAX_NR_CONSOLES */
#include &#60;linux/kd.h&#62;		/* For KDSETLED */
#include &#60;linux/vt.h&#62;
#include &#60;linux/console_struct.h&#62;	/* For vc_cons */

MODULE_DESCRIPTION("Example module illustrating the use of Keyboard LEDs.");
MODULE_AUTHOR("Daniele Paolo Scarpazza");
MODULE_LICENSE("GPL");

struct timer_list my_timer;
struct tty_driver *my_driver;
char kbledstatus = 0;

#define BLINK_DELAY   HZ/5
#define ALL_LEDS_ON   0x07
#define RESTORE_LEDS  0xFF

/*
 * Function my_timer_func blinks the keyboard LEDs periodically by invoking
 * command KDSETLED of ioctl() on the keyboard driver. To learn more on virtual 
 * terminal ioctl operations, please see file:
 *     /usr/src/linux/drivers/char/vt_ioctl.c, function vt_ioctl().
 *
 * The argument to KDSETLED is alternatively set to 7 (thus causing the led 
 * mode to be set to LED_SHOW_IOCTL, and all the leds are lit) and to 0xFF
 * (any value above 7 switches back the led mode to LED_SHOW_FLAGS, thus
 * the LEDs reflect the actual keyboard status).  To learn more on this, 
 * please see file:
 *     /usr/src/linux/drivers/char/keyboard.c, function setledstate().
 * 
 */

static void my_timer_func(unsigned long ptr)
{
	int *pstatus = (int *)ptr;

	if (*pstatus == ALL_LEDS_ON)
		*pstatus = RESTORE_LEDS;
	else
		*pstatus = ALL_LEDS_ON;

	(my_driver-&#62;ioctl) (vc_cons[fg_console].d-&#62;vc_tty, NULL, KDSETLED,
			    *pstatus);

	my_timer.expires = jiffies + BLINK_DELAY;
	add_timer(&#38;my_timer);
}

static int __init kbleds_init(void)
{
	int i;

	printk(KERN_INFO "kbleds: loading\n");
	printk(KERN_INFO "kbleds: fgconsole is %x\n", fg_console);
	for (i = 0; i &#60; MAX_NR_CONSOLES; i++) {
		if (!vc_cons[i].d)
			break;
		printk(KERN_INFO "poet_atkm: console[%i/%i] #%i, tty %lx\n", i,
		       MAX_NR_CONSOLES, vc_cons[i].d-&#62;vc_num,
		       (unsigned long)vc_cons[i].d-&#62;vc_tty);
	}
	printk(KERN_INFO "kbleds: finished scanning consoles\n");

	my_driver = vc_cons[fg_console].d-&#62;vc_tty-&#62;driver;
	printk(KERN_INFO "kbleds: tty driver magic %x\n", my_driver-&#62;magic);

	/*
	 * Set up the LED blink timer the first time
	 */
	init_timer(&#38;my_timer);
	my_timer.function = my_timer_func;
	my_timer.data = (unsigned long)&#38;kbledstatus;
	my_timer.expires = jiffies + BLINK_DELAY;
	add_timer(&#38;my_timer);

	return 0;
}

static void __exit kbleds_cleanup(void)
{
	printk(KERN_INFO "kbleds: unloading...\n");
	del_timer(&#38;my_timer);
	(my_driver-&#62;ioctl) (vc_cons[fg_console].d-&#62;vc_tty, NULL, KDSETLED,
			    RESTORE_LEDS);
}

module_init(kbleds_init);
module_exit(kbleds_cleanup);</PRE
></DIV
><P
>	If none of the examples in this chapter fit your debugging needs there might yet be some other tricks to try. Ever wondered what
	CONFIG_LL_DEBUG in <B
CLASS="COMMAND"
> make menuconfig </B
> is good for? If you activate that you get low level access to the serial port.
	While this might not sound very powerful by itself, you can patch <TT
CLASS="FILENAME"
>kernel/printk.c</TT
> or any other
	essential syscall to use printascii, thus makeing it possible to trace virtually everything what your code does over a
	serial line. If you find yourself porting the kernel to some new and former unsupported architecture this is usually
	amongst the first things that should be implemented. Logging over a netconsole might also be worth a try.
	</P
><P
>	While you have seen lots of stuff that can be used to aid debugging here, there are some things to be aware of.
	Debugging is almost always intrusive. Adding debug code can change the situation enough to make the bug seem to dissappear.
	Thus you should try to keep debug code to a minimum and make sure it does not show up in production code.
	</P
></DIV
><DIV
CLASS="NAVFOOTER"
><HR
ALIGN="LEFT"
WIDTH="100%"><TABLE
SUMMARY="Footer navigation table"
WIDTH="100%"
BORDER="0"
CELLPADDING="0"
CELLSPACING="0"
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
><A
HREF="c1159.htm"
ACCESSKEY="P"
>Prev</A
></TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="book1.htm"
ACCESSKEY="H"
>Home</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
><A
HREF="c1209.htm"
ACCESSKEY="N"
>Next</A
></TD
></TR
><TR
><TD
WIDTH="33%"
ALIGN="left"
VALIGN="top"
>Replacing Printks</TD
><TD
WIDTH="34%"
ALIGN="center"
VALIGN="top"
><A
HREF="c1159.htm"
ACCESSKEY="U"
>Up</A
></TD
><TD
WIDTH="33%"
ALIGN="right"
VALIGN="top"
>Scheduling Tasks</TD
></TR
></TABLE
></DIV
></BODY
></HTML
>